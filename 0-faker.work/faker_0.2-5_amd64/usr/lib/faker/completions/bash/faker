''/etc/bash_completion.d/faker generated.
Re-login to enable the new bash completion script.


#

# bash completion wrapper for faker
# version: 0.2.5
#
# Copyright (c) 2019-2025 Hedzr Yeh <hedzrz@gmail.com>
#

_cmdr_cmd_help_events () {
  $* --help|grep "^  [^ \[\$\#\!/\\@\"']"|awk -F'   ' '{print $1}'|awk -F',' '{for (i=1;i<=NF;i++) print $i}'
}


_cmdr_cmd_faker() {
  local cmd="faker" cur prev words
  _get_comp_words_by_ref cur prev words
  if [ "$prev" != "" ]; then
    unset 'words[${#words[@]}-1]'
  fi

  COMPREPLY=()
  #pre=${COMP_WORDS[COMP_CWORD-1]}
  #cur=${COMP_WORDS[COMP_CWORD]}

  case "$prev" in
    --help|--version)
      COMPREPLY=()
      return 0
      ;;
    $cmd)
      COMPREPLY=( $(compgen -W "$(_cmdr_cmd_help_events $cmd)" -- ${cur}) )
      return 0
      ;;
    *)
      COMPREPLY=( $(compgen -W "$(_cmdr_cmd_help_events ${words[@]})" -- ${cur}) )
      return 0
      ;;
  esac

  #opts="--help --version -q --quiet -v --verbose --system --dest="
  #opts="--help upgrade version deploy undeploy log ls ps start stop restart"
  opts="--help"
  cmds=$($cmd --help|grep "^  [^ \[\$\#\!/\\@\"']"|awk -F'   ' '{print $1}'|awk -F',' '{for (i=1;i<=NF;i++) print $i}')

  COMPREPLY=( $(compgen -W "${opts} ${cmds}" -- ${cur}) )

} # && complete -F _cmdr_cmd_faker faker

if type complete >/dev/null 2>&1; then
	# bash
	complete -F _cmdr_cmd_faker faker
else if type compdef >/dev/null 2>&1; then
	# zsh
	_cmdr_cmd_faker_zsh() { compadd $(_cmdr_cmd_faker); }
	compdef _cmdr_cmd_faker_zsh faker
fi; fi
